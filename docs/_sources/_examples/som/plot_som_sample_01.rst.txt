
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/som/plot_som_sample_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_som_plot_som_sample_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_som_plot_som_sample_01.py:


SOM Dimensionality Reduction
============================

Use ``SimpSOM`` to reduce the dimensionality of a synthetic dataset.

Clustering performed using k-means.

.. GENERATED FROM PYTHON SOURCE LINES 10-26

.. code-block:: default
   :lineno-start: 10

    from pkgname.utils.print_utils import suppress_stdout

    import SimpSOM as sps
    from sklearn.cluster import KMeans
    from sklearn.datasets import make_blobs
    from sklearn import preprocessing
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib import rcParams
    rcParams.update({'figure.autolayout': True})



    SEED = 0








.. GENERATED FROM PYTHON SOURCE LINES 27-32

Synthetic Dataset
-------------------

Dataset created using ``sklearn.datasets.make_blobs``.


.. GENERATED FROM PYTHON SOURCE LINES 32-49

.. code-block:: default
   :lineno-start: 33


    N_CLUSTERS = 6
    N_SAMPLES = N_CLUSTERS * 100
    N_FEATURES = 16

    print("The dataset has {dim} dimensions and {clusters} clusters.".format(dim=N_FEATURES, clusters=N_CLUSTERS))

    x, y = make_blobs(n_samples=N_SAMPLES,
                      n_features=N_FEATURES,
                      centers=N_CLUSTERS,
                      cluster_std=3,
                      random_state=SEED)

    # Scale data
    scaler = preprocessing.MinMaxScaler()
    x = scaler.fit_transform(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The dataset has 16 dimensions and 6 clusters.




.. GENERATED FROM PYTHON SOURCE LINES 50-56

Self Organising Map
-------------------

Initialise and train model using the synthetic dataset.
Display node weight difference graph.


.. GENERATED FROM PYTHON SOURCE LINES 56-64

.. code-block:: default
   :lineno-start: 57


    with suppress_stdout():
        net = sps.somNet(20, 20, x, PBC=False)
        net.train(0.01, 20000)

    net.diff_graph(printout=False, show=True)





.. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_001.png
    :alt: Nodes Grid w Weights Difference
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-71

k-Means Clustering
-------------------

Project datapoints onto the map and extract their coordinates
to use them in 2D k-Means clustering.


.. GENERATED FROM PYTHON SOURCE LINES 71-80

.. code-block:: default
   :lineno-start: 72


    prj=np.array(net.project(x, printout=False))

    kmeans = KMeans(n_clusters=N_CLUSTERS, random_state=SEED).fit(prj)

    plt.scatter(prj[:,0],prj[:,1], c=kmeans.labels_, cmap='rainbow')
    plt.show()





.. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_002.png
    :alt: plot som sample 01
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-87

Clustering Results
-------------------

Compare dataset class labels to obtained clusters.



.. GENERATED FROM PYTHON SOURCE LINES 87-92

.. code-block:: default
   :lineno-start: 87

    data_labels = pd.Series(y, name='Class')
    cluster_labels = pd.Series([chr(ord(str(num))+17) for num in kmeans.labels_], name='Cluster')
    print(pd.crosstab(data_labels, cluster_labels, dropna=False))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cluster    A    B    C   D    E    F
    Class                               
    0          0    0    0   0  100    0
    1          0    0  100   0    0    0
    2          0  100    0   0    0    0
    3          1    0    0  99    0    0
    4        100    0    0   0    0    0
    5          0    0    0   0    0  100




.. GENERATED FROM PYTHON SOURCE LINES 93-99

SOM individual feature maps
----------------------------

Display feature maps for all features in the original dataset.



.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: default
   :lineno-start: 99

    for i in range(N_FEATURES):
        net.nodes_graph(colnum=i, printout=False, show=True)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_003.png
          :alt: Node Grid w Feature #0
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_004.png
          :alt: Node Grid w Feature #1
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_005.png
          :alt: Node Grid w Feature #2
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_006.png
          :alt: Node Grid w Feature #3
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_007.png
          :alt: Node Grid w Feature #4
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_008.png
          :alt: Node Grid w Feature #5
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_009.png
          :alt: Node Grid w Feature #6
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_010.png
          :alt: Node Grid w Feature #7
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_011.png
          :alt: Node Grid w Feature #8
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_012.png
          :alt: Node Grid w Feature #9
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_013.png
          :alt: Node Grid w Feature #10
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_014.png
          :alt: Node Grid w Feature #11
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_015.png
          :alt: Node Grid w Feature #12
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_016.png
          :alt: Node Grid w Feature #13
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_017.png
          :alt: Node Grid w Feature #14
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/som/images/sphx_glr_plot_som_sample_01_018.png
          :alt: Node Grid w Feature #15
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  51.426 seconds)


.. _sphx_glr_download__examples_som_plot_som_sample_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_som_sample_01.py <plot_som_sample_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_som_sample_01.ipynb <plot_som_sample_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
