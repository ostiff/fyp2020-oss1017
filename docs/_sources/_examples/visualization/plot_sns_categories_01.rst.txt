
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/visualization/plot_sns_categories_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_visualization_plot_sns_categories_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_visualization_plot_sns_categories_01.py:


Seaborn (incomplete!)
=====================

Trying to display things with seaborn.

.. GENERATED FROM PYTHON SOURCE LINES 8-262



.. image:: /_examples/visualization/images/sphx_glr_plot_sns_categories_01_001.png
    :alt: severe (4860), warning (6809), mild (5609)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Adding...                  severe | max
    Adding...                 warning | max
    Adding...                    mild | max

    Dtypes:
    Unnamed: 0               int64
    study_no                object
    date                    object
    abdominal_pain          object
    abdominal_tenderness    object
                             ...  
    severe_bleed              bool
    severe_organ              bool
    severe                    bool
    warning                   bool
    mild                      bool
    Length: 428, dtype: object

    Data:
                   dsource        date   age  weight    plt  haematocrit_percent  body_temperature  gender  severe  warning   mild
    study_no                                                                                                                      
    01nva-003-2008   01nva  2020-07-17  16.0    72.0    8.0        54.0000              37.0750        1.0    True     True  False
    01nva-003-2009   01nva  2020-07-30  17.0    44.0    8.0        47.3333              37.0000        0.0    True     True  False
    01nva-003-2012   01nva  2020-08-15  17.0    48.0    9.0        49.1500              37.1875        0.0    True     True  False
    01nva-003-2024   01nva  2020-10-09  16.0   114.0    9.0        49.1000              37.1167        1.0    True     True  False
    01nva-003-2028   01nva  2020-11-07  18.0    82.0   18.0        42.9714              37.1500        0.0    True     True  False
    ...                ...         ...   ...     ...    ...            ...                  ...        ...     ...      ...    ...
    md-994              md  2003-08-27  13.0    53.0   88.0        42.0000              40.0000        0.0    True    False   True
    md-995              md  2003-08-27   9.0    27.5  132.0        37.8000              39.0000        0.0    True    False   True
    md-996              md  2003-07-24  10.0    33.0   75.0        43.0000              39.9000        0.0    True     True  False
    md-998              md  2003-08-29  13.0    44.0   94.0        41.5000              38.5000        1.0    True     True  False
    md-999              md  2003-08-29  15.0    49.0   56.0        40.5000              38.5000        0.0    True     True  False

    [12884 rows x 11 columns]
    12884
    severe     4860
    mild       5609
    warning    6809
    dtype: int64

    Model:
    Autoencoder(
      (encoder): Sequential(
        (0): Linear(in_features=5, out_features=3, bias=True)
        (1): Sigmoid()
        (2): Linear(in_features=3, out_features=2, bias=True)
        (3): Sigmoid()
      )
      (decoder): Sequential(
        (0): Linear(in_features=2, out_features=3, bias=True)
        (1): Sigmoid()
        (2): Linear(in_features=3, out_features=5, bias=True)
        (3): Sigmoid()
      )
    )

    Encoded:
    [[0.1520529  0.74539393]
     [0.2646528  0.7333292 ]
     [0.23637003 0.7385248 ]
     ...
     [0.453338   0.620019  ]
     [0.28497958 0.5708288 ]
     [0.23240355 0.62076086]]

    Data:
                   dsource        date   age  weight    plt  haematocrit_percent  body_temperature  gender  severe  warning   mild       x       y
    study_no                                                                                                                                      
    01nva-003-2008   01nva  2020-07-17  16.0    72.0    8.0        54.0000              37.0750        1.0    True     True  False  0.1521  0.7454
    01nva-003-2009   01nva  2020-07-30  17.0    44.0    8.0        47.3333              37.0000        0.0    True     True  False  0.2647  0.7333
    01nva-003-2012   01nva  2020-08-15  17.0    48.0    9.0        49.1500              37.1875        0.0    True     True  False  0.2364  0.7385
    01nva-003-2024   01nva  2020-10-09  16.0   114.0    9.0        49.1000              37.1167        1.0    True     True  False  0.0784  0.7186
    01nva-003-2028   01nva  2020-11-07  18.0    82.0   18.0        42.9714              37.1500        0.0    True     True  False  0.1081  0.6866
    ...                ...         ...   ...     ...    ...            ...                  ...        ...     ...      ...    ...     ...     ...
    md-994              md  2003-08-27  13.0    53.0   88.0        42.0000              40.0000        0.0    True    False   True  0.2172  0.5767
    md-995              md  2003-08-27   9.0    27.5  132.0        37.8000              39.0000        0.0    True    False   True  0.4946  0.5147
    md-996              md  2003-07-24  10.0    33.0   75.0        43.0000              39.9000        0.0    True     True  False  0.4533  0.6200
    md-998              md  2003-08-29  13.0    44.0   94.0        41.5000              38.5000        1.0    True     True  False  0.2850  0.5708
    md-999              md  2003-08-29  15.0    49.0   56.0        40.5000              38.5000        0.0    True     True  False  0.2324  0.6208

    [12884 rows x 13 columns]






|

.. code-block:: default
   :lineno-start: 9


    # Library
    import pickle
    import pandas as pd
    import numpy as np
    import matplotlib as mpl

    # Specific
    from torch.utils.data import DataLoader
    from sklearn.preprocessing import MinMaxScaler

    # Specific
    from pkgname.core.AE.autoencoder import get_device, set_seed
    from pkgname.utils.data_loader import load_dengue, IQR_rule

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('font', size=8)
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ------------------------------
    # Constants
    # ------------------------------
    features = [
        "age",
        "weight",
        "plt",
        "haematocrit_percent",
        "body_temperature"
    ]

    outcomes = [
        "severe",
        "warning",
        "mild",
    ]

    others = [
        'study_no',
        'dsource',
        'date'
    ]

    mappings = {
        'gender': {
            'Female': 0,
            'Male': 1
        }
    }

    aggregation = {
        'dsource': 'last',
        'date': 'last',
        'age': 'max',
        'weight': 'mean',
        'plt': 'min',
        'haematocrit_percent': 'max',
        'body_temperature': 'mean',
        'gender': 'first',
    }

    cmaps = {
        'warning': 'Oranges',
        'severe': 'Reds',
        'mild': 'Blues'
    }

    nrows, ncols = 1, 3

    # ------------------------------
    # Load data
    # ------------------------------
    # Load data
    data = pd.read_csv('resources/datasets/combined_tidy_v0.0.10.csv')

    # Liver abnormal
    data['liver_abnormal'] = \
        data.liver_acute | \
        data.liver_involved | \
        data.liver_failure | \
        data.liver_severe | \
        data.jaundice

    # Kidney abnormal
    data['kidney_abnormal'] = \
        data.skidney

    # Create features
    data['severe_leak'] = \
        data.ascites | \
        data.overload | \
        data.oedema_pulmonary | \
        data.respiratory_distress | \
        data.oedema | \
        data.pleural_effusion | \
        data.effusion

    # Bleeding
    data['severe_bleed'] = \
        data.bleeding_gi | \
        data.bleeding_urine # useless

    # Organ impairment
    data['severe_organ'] = \
        data.cns_abnormal | \
        data.neurology.astype(bool) | \
        data.liver_abnormal | \
        data.kidney_abnormal | \
        (data.ast.fillna(0) >= 1000) | \
        (data.alt.fillna(0) >= 1000)

    # Category: severe
    data['severe'] = \
        data.severe_leak | \
        data.severe_bleed | \
        data.severe_organ | \
        data.shock

    # Category: warning WHO
    data['warning'] = \
        data.abdominal_pain | \
        data.abdominal_tenderness | \
        data.vomiting | \
        data.ascites | \
        data.pleural_effusion | \
        data.bleeding_mucosal | \
        data.restlessness | \
        data.lethargy | \
        (data.liver_palpation_size.fillna(0) > 2)

    # Category: mild
    data['mild'] = ~(data.severe | data.warning)

    # Fill empty values (be careful!)
    for c in outcomes:
        data[c] = data[c].fillna(0)

    # Ensure all outcomes are in aggregation
    for c in outcomes:
        if c not in aggregation:
            print("Adding... %23s | max" % c)
            aggregation[c] = 'max'

    # Filter data (age, iqr, ...)
    data = data[data.age.between(0.0, 18.0)]
    data = data[data.plt < 50000]

    # Filter outliers
    data = IQR_rule(data, [
        'plt',
    ])

    # Rename
    # .. note: Done after convert_dtypes so that
    #          it remains 0 or 1, otherwise it will
    #          be transformed to boolean feature.
    #          (its ok too).
    data = data.replace(mappings)

    # Show dtypes
    print("\nDtypes:")
    print(data.dtypes)

    # Get worst state for patient
    data = data.groupby(by="study_no", dropna=False) \
        .agg(aggregation).dropna()

    # Show data
    print("\nData:")
    print(data)
    print(data.index.nunique())
    print(data[outcomes].sum().sort_values())


    # ------------------------------
    # Load Model
    # ------------------------------
    # Load model
    model_path = 'resources/models/ae_sig_3'
    model = pickle.load(open(model_path, 'rb'))

    # Show
    print("\nModel:")
    print(model)

    # ------------------------------
    # Projections
    # ------------------------------
    # .. note: The scaling method should have also been
    #          saved when training the model.
    # Features
    datap = data[features].copy(deep=True)

    # Scale first
    datap = MinMaxScaler().fit_transform(datap)

    # Encode
    encoded = model.encode_inputs( \
        DataLoader(datap, 16, shuffle=False))

    # Show
    print("\nEncoded:")
    print(encoded)

    # Include in original dataset
    data[['x', 'y']] = encoded

    # Show
    print("\nData:")
    print(data)


    # ------------------------------
    # Visualization
    # ------------------------------
    # Libraries
    import matplotlib
    import seaborn as sns
    import matplotlib.pyplot as plt


    # ------------------------------------
    # Show interesting outcomes (contours)
    # ------------------------------------
    # Figure with kdes
    f5, axes5 = plt.subplots(nrows, ncols, figsize=(15, 4),
        sharex=True, sharey=True)

    # Loop
    for i, c in enumerate(outcomes):
        # Select dataset
        aux = data[data[c] == 1]
        # Plot kde
        sns.kdeplot(x=aux.x, y=aux.y,
            ax=axes5.flat[i], levels=14,
            fill=True, palette=mpl.cm.get_cmap('Reds')
        )
        # Configure
        axes5.flat[i].set(aspect='equal',
            title='%s (%s)' % (c, aux.shape[0]))

    # Configure
    plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.952 seconds)


.. _sphx_glr_download__examples_visualization_plot_sns_categories_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sns_categories_01.py <plot_sns_categories_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sns_categories_01.ipynb <plot_sns_categories_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
