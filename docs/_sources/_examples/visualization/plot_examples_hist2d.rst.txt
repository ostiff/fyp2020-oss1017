
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/visualization/plot_examples_hist2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_visualization_plot_examples_hist2d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_visualization_plot_examples_hist2d.py:


KDE - Outcomes
==============

This script is useful to explore the regions in which
each of the clinical outcomes (e.g. shock, leakage, ...)
are more common (higher density).

Notes:
    - The definition of the compound features can be changed.
      For instance, to the definition of severity defined by
      damien we have included more variables that are related.

    - There are some important filtering.
        age <= 18 => children
        plt => exxtreme outlier

    - The previously mentioned changes, affect also the
      contour maps displayed.

.. GENERATED FROM PYTHON SOURCE LINES 22-269



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/visualization/images/sphx_glr_plot_examples_hist2d_001.png
          :alt: count, mean, contours (not working)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/visualization/images/sphx_glr_plot_examples_hist2d_002.png
          :alt: counts, sum, mean (colormesh), mean (contour)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/visualization/images/sphx_glr_plot_examples_hist2d_003.png
          :alt: counts, sum, mean
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
                   dsource   age  weight    plt  haematocrit_percent  body_temperature  gender       date  shock
    study_no                                                                                                    
    01nva-003-2008   01nva  16.0    72.0    8.0        54.0000              37.0750        1.0 2020-07-17   True
    01nva-003-2009   01nva  17.0    44.0    8.0        47.3333              37.0000        0.0 2020-07-30   True
    01nva-003-2012   01nva  17.0    48.0    9.0        49.1500              37.1875        0.0 2020-08-15   True
    01nva-003-2024   01nva  16.0   114.0    9.0        49.1000              37.1167        1.0 2020-10-09   True
    01nva-003-2028   01nva  18.0    82.0   18.0        42.9714              37.1500        0.0 2020-11-07   True
    ...                ...   ...     ...    ...            ...                  ...        ...        ...    ...
    md-994              md  13.0    53.0   88.0        42.0000              40.0000        0.0 2003-08-27  False
    md-995              md   9.0    27.5  132.0        37.8000              39.0000        0.0 2003-08-27  False
    md-996              md  10.0    33.0   75.0        43.0000              39.9000        0.0 2003-07-24  False
    md-998              md  13.0    44.0   94.0        41.5000              38.5000        1.0 2003-08-29  False
    md-999              md  15.0    49.0   56.0        40.5000              38.5000        0.0 2003-08-29  False

    [12872 rows x 9 columns]
    dsource                       object
    age                          float64
    weight                       float64
    plt                          float64
    haematocrit_percent          float64
    body_temperature             float64
    gender                       float64
    date                   datetime64...
    shock                         object
    dtype: object
    12872
    age    101907.0
    dtype: float64

    Model:
    Autoencoder(
      (encoder): Sequential(
        (0): Linear(in_features=5, out_features=3, bias=True)
        (1): Sigmoid()
        (2): Linear(in_features=3, out_features=2, bias=True)
        (3): Sigmoid()
      )
      (decoder): Sequential(
        (0): Linear(in_features=2, out_features=3, bias=True)
        (1): Sigmoid()
        (2): Linear(in_features=3, out_features=5, bias=True)
        (3): Sigmoid()
      )
    )

    Encoded:
    [[0.1520529  0.74539393]
     [0.2646528  0.7333292 ]
     [0.23637003 0.7385248 ]
     ...
     [0.453338   0.620019  ]
     [0.28497958 0.5708288 ]
     [0.23240355 0.62076086]]

    Data:
                   dsource   age  weight    plt  haematocrit_percent  body_temperature  gender       date  shock       x       y
    study_no                                                                                                                    
    01nva-003-2008   01nva  16.0    72.0    8.0        54.0000              37.0750        1.0 2020-07-17   True  0.1521  0.7454
    01nva-003-2009   01nva  17.0    44.0    8.0        47.3333              37.0000        0.0 2020-07-30   True  0.2647  0.7333
    01nva-003-2012   01nva  17.0    48.0    9.0        49.1500              37.1875        0.0 2020-08-15   True  0.2364  0.7385
    01nva-003-2024   01nva  16.0   114.0    9.0        49.1000              37.1167        1.0 2020-10-09   True  0.0784  0.7186
    01nva-003-2028   01nva  18.0    82.0   18.0        42.9714              37.1500        0.0 2020-11-07   True  0.1081  0.6866
    ...                ...   ...     ...    ...            ...                  ...        ...        ...    ...     ...     ...
    md-994              md  13.0    53.0   88.0        42.0000              40.0000        0.0 2003-08-27  False  0.2172  0.5767
    md-995              md   9.0    27.5  132.0        37.8000              39.0000        0.0 2003-08-27  False  0.4946  0.5147
    md-996              md  10.0    33.0   75.0        43.0000              39.9000        0.0 2003-07-24  False  0.4533  0.6200
    md-998              md  13.0    44.0   94.0        41.5000              38.5000        1.0 2003-08-29  False  0.2850  0.5708
    md-999              md  15.0    49.0   56.0        40.5000              38.5000        0.0 2003-08-29  False  0.2324  0.6208

    [12872 rows x 11 columns]






|

.. code-block:: default
   :lineno-start: 23


    # Library
    import pickle
    import pandas as pd
    import numpy as np
    import matplotlib as mpl

    # Specific
    from torch.utils.data import DataLoader
    from sklearn.preprocessing import MinMaxScaler

    # Specific
    from pkgname.core.AE.autoencoder import get_device, set_seed
    from pkgname.utils.data_loader import load_dengue, IQR_rule

    # Local
    import _utils



    # ------------------------------
    # Constants
    # ------------------------------
    # Load constants
    features = _utils.features
    others = _utils.others
    mappings = _utils.mappings
    aggregation = _utils.aggregation
    cmaps = _utils.cmaps

    # Define outcomes
    outcomes = [
       "age"
    ]

    # Ensure all outcomes are in aggregation
    for c in outcomes:
        if c not in aggregation:
            print("Adding... %23s | max" % c)
            aggregation[c] = 'max'

    nrows, ncols = 5, 8

    # ------------------------------
    # Load data
    # ------------------------------
    # Load data
    data = _utils.load_data()

    # Fill empty values (be careful!)
    for c in outcomes:
        data[c] = data[c].fillna(0)

    # Filter data (age, iqr, ...)
    data = data[data.age.between(0.0, 18.0)]
    data = data[data.plt < 50000]

    # Filter outliers
    data = IQR_rule(data, [
        'plt',
        #'haematocrit_percent',
        #'body_temperature'
    ])

    # Rename
    # .. note: Done after convert_dtypes so that
    #          it remains 0 or 1, otherwise it will
    #          be transformed to boolean feature.
    #          (its ok too).
    data = data.replace(mappings)

    # Get worst state for patient
    data = data.groupby(by="study_no", dropna=False) \
        .agg(aggregation).dropna()

    # Show data
    print("\nData:")
    print(data)
    print(data.dtypes)
    print(data.index.nunique())
    print(data[outcomes].sum().sort_values())


    # ------------------------------
    # Load Model
    # ------------------------------
    # Load model
    model = _utils.load_model()

    # Show
    print("\nModel:")
    print(model)

    # ------------------------------
    # Projections
    # ------------------------------
    # .. note: The scaling method should have also been
    #          saved when training the model.
    # Features
    datap = data[features].copy(deep=True)

    # Scale first
    datap = MinMaxScaler().fit_transform(datap)

    # Encode
    encoded = model.encode_inputs( \
        DataLoader(datap, 16, shuffle=False))

    # Include in original dataset
    data[['x', 'y']] = encoded

    # Show
    print("\nEncoded:")
    print(encoded)
    print("\nData:")
    print(data)

    # -------------------------------
    # Visualization
    # -------------------------------
    # Libraries
    import matplotlib.pyplot as plt

    # Gaussian kde
    from scipy.stats import gaussian_kde

    # Own
    from _utils import kde_mpl_compute
    from _utils import kde_mpl_plot
    from _utils import kde_mpl

    # Data
    x, y, z = data.x, data.y, data.plt


    # --------------------------
    # Direct plotting
    # --------------------------
    # Plot hexbin
    fig, axes = plt.subplots(ncols=3, figsize=(15, 4), sharey=True)

    # Plot count
    m1 = axes.flat[0].hexbin(x, y, label=c,
        gridsize=30, cmap=cmaps.get(c, 'Reds'))
    axes.flat[0].set(title='count', aspect='equal')
    plt.colorbar(m1, ax=axes.flat[0])

    # Plot mean
    m2 = axes.flat[1].hexbin(x, y, C=z, label=c,
        gridsize=30, cmap=cmaps.get(c, 'Reds'))
    axes.flat[1].set(title='mean', aspect='equal')
    plt.colorbar(m2, ax=axes.flat[1])

    # Create contours
    kde_mpl(x, y, weights=z, ax=axes.flat[2])
    axes.flat[2].set(title='contours (not working)', aspect='equal')

    # Configure
    plt.tight_layout()

    # --------------------------
    # Using hist2d functions
    # --------------------------
    # Create figure
    fig, (ax1, ax2, ax3, ax4) = \
        plt.subplots(ncols=4, figsize=(15, 3), sharey=True)

    # Compute count
    counts, xbins, ybins, im1 = \
        ax1.hist2d(x, y, bins=(30, 30), cmap='Reds')

    # Compute sums
    sums, _, _, im2 = \
        ax2.hist2d(x, y, weights=z,
                   bins=(xbins, ybins),
                   cmap='Reds')

    # Compute mean
    mean = (sums / counts).T

    # Plot colormesh
    with np.errstate(divide='ignore', invalid='ignore'):
        m3 = ax3.pcolormesh(ybins, xbins,
            mean, cmap='Reds')

    # .. note: We are ignoring the last bin value.
    # Plot contours
    ax4.contour(xbins[:-1], ybins[:-1], mean,
        levels=14, linewidths=0.25, alpha=0.5,
        linestyles='dashed', colors='k')
    cntr = ax4.contourf(xbins[:-1], ybins[:-1], mean,
        levels=14, cmap='Reds')
    cb = plt.colorbar(cntr, ax=ax4)

    # Plot image
    #ax5.imshow(mean, origin='lower',
    #                 aspect='auto',
    #                 cmap='Reds')

    # Configure
    ax1.set(aspect='equal', title='counts')
    ax2.set(aspect='equal', title='sum')
    ax3.set(aspect='equal', title='mean (colormesh)')
    ax4.set(aspect='equal', title='mean (contour)')
    #ax5.set(aspect='equal', title='mean (imshow)')

    # ---------------------------
    # Using histogram2d functions
    # ---------------------------
    # Compute counts
    counts, xbins, ybins = \
        np.histogram2d(x, y, bins=(30, 30))

    # Compute sums
    sums, _, _ = \
        np.histogram2d(x, y, weights=z, bins=(xbins, ybins))

    # Compute mean
    mean = (sums / counts).T

    # Create figure
    fig, (ax1, ax2, ax3) = plt.subplots(ncols=3,
        figsize=(15, 4), sharey=True)

    # Plot counts
    m1 = ax1.pcolormesh(xbins, ybins, counts.T, cmap='Reds')
    plt.colorbar(m1, ax=ax1)

    # Plot sums
    m2 = ax2.pcolormesh(xbins, ybins, sums.T, cmap='Reds')
    plt.colorbar(m2, ax=ax2)

    # Plot mean
    with np.errstate(divide='ignore', invalid='ignore'):  
        m3 = ax3.pcolormesh(xbins, ybins,
            mean, cmap='Reds')
    plt.colorbar(m3, ax=ax3)

    # Configure
    ax1.set(aspect='equal', title='counts')
    ax2.set(aspect='equal', title='sum')
    ax3.set(aspect='equal', title='mean')

    # Configure
    plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.080 seconds)


.. _sphx_glr_download__examples_visualization_plot_examples_hist2d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_examples_hist2d.py <plot_examples_hist2d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_examples_hist2d.ipynb <plot_examples_hist2d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
