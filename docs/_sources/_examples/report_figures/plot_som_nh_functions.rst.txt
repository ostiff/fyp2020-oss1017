
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/report_figures/plot_som_nh_functions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_report_figures_plot_som_nh_functions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_report_figures_plot_som_nh_functions.py:


SOM neighbourhood functions
===========================

.. GENERATED FROM PYTHON SOURCE LINES 6-74



.. image:: /_examples/report_figures/images/sphx_glr_plot_som_nh_functions_001.png
    :alt: Gaussian, Bubble, Mexican hat, Triangle
    :class: sphx-glr-single-img





.. code-block:: default
   :lineno-start: 7


    import numpy as np
    import seaborn as sns
    import matplotlib
    import matplotlib.pyplot as plt

    # matplotlib.use("pgf")
    matplotlib.rcParams.update({
        # "pgf.texsystem": "pdflatex",
        'font.family': 'serif',
        # 'text.usetex': True,
        'font.size': 18,
        'pgf.rcfonts': False
    })


    def gaussian(x, c, sigma):
        """Returns a Gaussian centered in c."""
        d = 2 * sigma * sigma
        y = np.exp(-np.power(x - c, 2) / d)
        return y


    def mexican_hat(x, c, sigma):
        """Mexican hat centered in c."""
        p = np.power(x - c, 2)
        d = 2 * sigma * sigma
        return (np.exp(-p / d) * (1 - 2 / d * p)).T


    def bubble(x, c, sigma):
        """Constant function centered in c with spread sigma."""
        y = np.logical_and(x > c - sigma, x < c + sigma)
        return y


    def triangle(x, c, sigma):
        """Triangular function centered in c with spread sigma."""
        triangle_x = (-abs(c - x)) + sigma
        triangle_x[triangle_x < 0] = 0.
        return triangle_x


    points = 250
    x = np.linspace(-3.5, 3.5, num=points)

    fig, axes = plt.subplots(2, 2, figsize=(10, 10))
    axes = axes.flatten()
    for ax in axes:
        ax.set_box_aspect(1)
        ax.set(xlim=(-3.5, 3.5), ylim=(-0.7, 1.25))
        ax.xaxis.set_major_locator(plt.MaxNLocator(3))
        ax.yaxis.set_major_locator(plt.MaxNLocator(2))

    sns.lineplot(ax=axes[0], x=x, y=gaussian(x,0,1), color=".3")
    axes[0].set_title(r'Gaussian')

    sns.lineplot(ax=axes[1], x=x, y=bubble(x,0,1), color=".3")
    axes[1].set_title(r'Bubble')

    sns.lineplot(ax=axes[2], x=x, y=mexican_hat(x,0,1), color=".3")
    axes[2].set_title(r'Mexican hat')

    sns.lineplot(ax=axes[3], x=x, y=triangle(x,0,1), color=".3")
    axes[3].set_title(r'Triangle')

    # fig.savefig("som_nh_functions.pdf", bbox_inches='tight')
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.243 seconds)


.. _sphx_glr_download__examples_report_figures_plot_som_nh_functions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_som_nh_functions.py <plot_som_nh_functions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_som_nh_functions.ipynb <plot_som_nh_functions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
